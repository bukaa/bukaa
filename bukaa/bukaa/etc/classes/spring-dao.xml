<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"> 
    
    <import resource="classpath*:spring-cache.xml"/>
    
	<!-- 自动扫描 -->
	<context:component-scan base-package="cn.bukaa.service">
        <context:exclude-filter type="regex" expression=".impl.*"/>
    </context:component-scan>
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="locations">  
	    	<list>  
	          	<value>classpath*:/application.properties</value>
	    	</list>  
	    </property>  
	</bean>
	
	<!-- 数据源配置,使用AtomikosNonXADataSourceBean,可实现多数据源的事务管理 -->
	<bean id="dataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean">
		<property name="uniqueResourceName" value="atomikosNonXADS1"></property>
		<property name="driverClassName" value="${mysql.jdbc.driver}"/>
		<property name="url" value="${mysql.jdbc.url}"/>
		<property name="user" value="${mysql.jdbc.username}"/>
		<property name="password" value="${mysql.jdbc.password}"/>
		<property name="poolSize" value="${poolSize}" />  
        <property name="minPoolSize" value="${minPoolSize}"/>  
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="borrowConnectionTimeout" value="${borrowConnectionTimeout}"></property>
	</bean>
	<bean id="dataSource_orcl" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean">
		<property name="uniqueResourceName" value="atomikosNonXADS2"></property>
		<property name="driverClassName" value="${oracle.jdbc.driver}"/>
		<property name="url" value="${oracle.jdbc.url}"/>
		<property name="user" value="${oracle.jdbc.username}"/>
		<property name="password" value="${oracle.jdbc.password}"/>
		<property name="poolSize" value="${poolSize}" />  
        <property name="minPoolSize" value="${minPoolSize}"/>  
        <property name="maxPoolSize" value="${maxPoolSize}"/>        
        <property name="borrowConnectionTimeout" value="${borrowConnectionTimeout}"></property>
	</bean>
	
	<!-- Spring和MyBatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:cn/bukaa/dao/Mapper/mysql/**/*.xml"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<bean id="sqlSessionFactory_orcl" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_orcl"/>
		<property name="mapperLocations" value="classpath:cn/bukaa/dao/Mapper/orcl/**/*.xml"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 持久化模板SqlSessionTemplate注入 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
	  	<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<bean id="sqlSession_orcl" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
	  	<constructor-arg index="0" ref="sqlSessionFactory_orcl" />
	</bean>
	
	<!-- 基础Dao的SqlSession注入 -->
	<bean id="baseDao" class="cn.bukaa.dao.BaseDao">
	  	<property name="sqlSession" ref="sqlSession" />
	</bean>
	
	<!-- DAO接口所在包-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.bukaa.dao.Mapper.mysql"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean> 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.bukaa.dao.Mapper.orcl"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_orcl"/>
	</bean>
	
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">  
        <property name="forceShutdown">  
            <value>true</value>  
        </property>  
    </bean>
    
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  
        <property name="transactionTimeout" value="300" />  
    </bean>
    
    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">  
        <property name="transactionManager">  
            <ref bean="atomikosTransactionManager" />  
        </property>  
        <property name="userTransaction">  
            <ref bean="atomikosUserTransaction" />  
        </property>  
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>  
      
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- 定义声明式事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
          <tx:attributes>           
             <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="execute*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="synch*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="init*" propagation="REQUIRED" rollback-for="Exception" />
         </tx:attributes>
     </tx:advice>
     
     <aop:config proxy-target-class="true">
     	<aop:pointcut expression="execution(public * cn.bukaa.service.*.impl.*.*(..))" id="txServicePoint"/>	       	          	   	     	
     	<aop:advisor advice-ref="txAdvice" pointcut-ref="txServicePoint" order="1000"/>
     </aop:config>

</beans>